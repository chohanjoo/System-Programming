package SP18_simulator;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;



/**
 * ResourceManager는 컴퓨터의 가상 리소스들을 선언하고 관리하는 클래스이다.
 * 크게 네가지의 가상 자원 공간을 선언하고, 이를 관리할 수 있는 함수들을 제공한다.<br><br>
 * 
 * 1) 입출력을 위한 외부 장치 또는 device<br>
 * 2) 프로그램 로드 및 실행을 위한 메모리 공간. 여기서는 64KB를 최대값으로 잡는다.<br>
 * 3) 연산을 수행하는데 사용하는 레지스터 공간.<br>
 * 4) SYMTAB 등 simulator의 실행 과정에서 사용되는 데이터들을 위한 변수들. 
 * <br><br>
 * 2번은 simulator위에서 실행되는 프로그램을 위한 메모리공간인 반면,
 * 4번은 simulator의 실행을 위한 메모리 공간이라는 점에서 차이가 있다.
 */
public class ResourceManager{
	/**
	 * deviceManager는  디바이스의 이름을 입력받았을 때 해당 디바이스의 파일 입출력 관리 클래스를 리턴하는 역할을 한다.
	 * 예를 들어, 'A1'이라는 디바이스에서 파일을 read모드로 열었을 경우, hashMap에 <"A1", scanner(A1)> 등을 넣음으로서 이를 관리할 수 있다.
	 * <br><br>
	 * 변형된 형태로 사용하는 것 역시 허용한다.<br>
	 * 예를 들면 key값으로 String대신 Integer를 사용할 수 있다.
	 * 파일 입출력을 위해 사용하는 stream 역시 자유로이 선택, 구현한다.
	 * <br><br>
	 * 이것도 복잡하면 알아서 구현해서 사용해도 괜찮습니다.
	 */
	ArrayList<String> deviceManager =new ArrayList<String>();
	char[] memory = new char[65536]; // String으로 수정해서 사용하여도 무방함.
	int[] register = new int[10];
	double register_F;
	
	SymbolTable symtabList;
	// 이외에도 필요한 변수 선언해서 사용할 것.

	int length;
	String progName = "";
	String startAddress;
	
	InstTable instTab;
	
	boolean flag = false;
	int read_location = 0;		//디바이스에서 읽은 위치를 기억한다.
	/**
	 * 메모리, 레지스터등 가상 리소스들을 초기화한다.
	 */
	
	public ResourceManager() {
		symtabList = new SymbolTable();
		instTab = new InstTable("C:\\Users\\한주\\Downloads\\SP18_simulator\\src\\SP18_simulator\\inst.data");
		initializeResource();
	}
	public void initializeResource(){
		for(int i=0;i<65536;++i)
			memory[i] = '*';
		
		for(int i=0;i<10;++i)
			register[i] = 0;
	}
	
	/**
	 * deviceManager가 관리하고 있는 파일 입출력 stream들을 전부 종료시키는 역할.
	 * 프로그램을 종료하거나 연결을 끊을 때 호출한다.
	 */
	public void closeDevice() {
		
	}
	
	/**
	 * 디바이스를 사용할 수 있는 상황인지 체크. TD명령어를 사용했을 때 호출되는 함수.
	 * @param devName 확인하고자 하는 디바이스의 번호,또는 이름
	 */
	public void testDevice(String devName) {
		try {
		File file = new File("C:\\Users\\한주\\Downloads\\SP18_simulator\\src\\SP18_simulator\\" + devName + ".txt");
		FileReader filereader = new FileReader(file);
		
		filereader.close();
		
		flag = true;
		deviceManager.add(devName);
		}catch(FileNotFoundException e) {
			flag = false;
		}catch(IOException e) {
			flag = false;
		}
		
	}

	/**
	 * 디바이스로부터 1개의 글자를 읽어들인다. RD명령어를 사용했을 때 호출되는 함수.
	 * @param devName 디바이스의 이름
	 * @return 가져온 데이터
	 */
	public char readDevice(String devName){
		try {
			File file = new File("C:\\Users\\한주\\Downloads\\SP18_simulator\\src\\SP18_simulator\\" + devName + ".txt");
			FileReader filereader = new FileReader(file);
			int ch = 0;
			int i=0;
			while((ch=filereader.read())!=-1) {
				if(i == read_location) {
					read_location++;
					filereader.close();
					if(ch == '0')
						ch = '0' - 0x30;
					return (char)ch;
				}
				else
				++i;
			}
			filereader.close();
		}catch(FileNotFoundException e) {
			System.out.println("error");
		}catch(IOException e) {
			System.out.println("error");

		}
		
		return (char)0;
		
	}

	/**
	 * 디바이스로 1개의 글자를 출력한다. WD명령어를 사용했을 때 호출되는 함수.
	 * @param devName 디바이스의 이름
	 * @param data 보내는 데이터
	 */
	public void writeDevice(String devName, char data){
		try {
			File file = new File("C:\\Users\\한주\\Downloads\\SP18_simulator\\src\\SP18_simulator\\" + devName + ".txt");
			BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file,true));
			PrintWriter pw = new PrintWriter(bufferedWriter,true);
			
			pw.write(data);
			pw.close();
		}catch(IOException e) {
			
		}
	}
	
	/**
	 * 메모리의 특정 위치에서 원하는 개수만큼의 글자를 가져온다.
	 * @param location 메모리 접근 위치 인덱스
	 * @param num 데이터 개수
	 * @return 가져오는 데이터
	 */
	public char[] getMemory(int location, int num){
		String temp = "";
		for(int i=0;i<num;++i)
			temp = temp.concat(String.format("%c",memory[location+i]));
		return temp.toCharArray();
		
	}

	/**
	 * 메모리의 특정 위치에 원하는 개수만큼의 데이터를 저장한다. 
	 * @param locate 접근 위치 인덱스
	 * @param data 저장하려는 데이터
	 * @param num 저장하는 데이터의 개수
	 */
	public void setMemory(int locate, char[] data, int num){

		for(int i=0;i<num;++i)
			memory[locate + i] = data[i];	
	}
	
	public void setMemory(int locate, int data) {
		memory[locate] = (char)data;
	}

	/**
	 * 번호에 해당하는 레지스터가 현재 들고 있는 값을 리턴한다. 레지스터가 들고 있는 값은 문자열이 아님에 주의한다.
	 * @param regNum 레지스터 분류번호
	 * @return 레지스터가 소지한 값
	 */
	public int getRegister(int regNum){
		return register[regNum];
		
	}

	/**
	 * 번호에 해당하는 레지스터에 새로운 값을 입력한다. 레지스터가 들고 있는 값은 문자열이 아님에 주의한다.
	 * @param regNum 레지스터의 분류번호
	 * @param value 레지스터에 집어넣는 값
	 */
	public void setRegister(int regNum, int value){
	
		register[regNum] = value;
	}

	/**
	 * 주로 레지스터와 메모리간의 데이터 교환에서 사용된다. int값을 char[]형태로 변경한다.
	 * @param data
	 * @return
	 */
	public char[] intToChar(int data){
		String temp= String.format("%06X", data);		// data를 6자리 String으로 바꾼다.
		int packing = 0;
		char[] result = new char[3];
		for(int i=0;i<6;++i) {
			if((i+1)%2==1) {
				if(temp.charAt(i)>=0x30 && temp.charAt(i)<=0x39) 
					packing = temp.charAt(i) - 0x30;
				
				else if(temp.charAt(i)>=0x41 && temp.charAt(i)<=0x46) 
					packing = temp.charAt(i) - 0x37;
				
				packing<<=4;
				}
				else {
					if(temp.charAt(i)>=0x30 && temp.charAt(i)<=0x39) 
						packing += temp.charAt(i) - 0x30;
					
					else if(temp.charAt(i)>=0x41 && temp.charAt(i)<=0x46) 
						packing += temp.charAt(i) - 0x37;
					
					result[i/2] = (char)packing;	// char 2byte씩 읽어 packing하여 result 배열에 저장한다.
					packing = 0;
				}
		}
		return result;
	}

	/**
	 * 주로 레지스터와 메모리간의 데이터 교환에서 사용된다. char[]값을 int형태로 변경한다.
	 * @param data
	 * @return
	 */
	public int charToInt(char[] data){
		char[] mem = data;
		String mem_str = "";
		for(int j=0;j<3;++j) {		// data에 있는 값을 unpacking하여 mem_str에 저장한다. 이를 리턴한다.
			mem_str = mem_str.concat(String.format("%X", (mem[j] &0xF0)>>4));
			mem_str = mem_str.concat(String.format("%X", mem[j] & 0x0F));
		}
		
		
		return  Integer.decode("0X" + mem_str);
	}
}